/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package protocols.replication;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Initial structure to be send for replication */
@org.apache.avro.specific.AvroGenerated
public class Controller extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4151559123042920775L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Controller\",\"namespace\":\"protocols.replication\",\"doc\":\"Initial structure to be send for replication\",\"fields\":[{\"name\":\"controllerEntity\",\"type\":{\"type\":\"record\",\"name\":\"Entity\",\"doc\":\"Device info for the network\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"ipadress\",\"type\":\"string\"},{\"name\":\"port\",\"type\":\"int\"},{\"name\":\"type\",\"type\":\"string\"}]}},{\"name\":\"entities\",\"type\":{\"type\":\"array\",\"items\":\"Entity\"}},{\"name\":\"temperatureHistories\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TemperatureHistory\",\"doc\":\"Temperature measured by a sensor\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"temperatures\",\"type\":{\"type\":\"array\",\"items\":\"double\"}}]}}},{\"name\":\"lightStatusses\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"LightStatus\",\"doc\":\"Status of all the lights\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"state\",\"type\":\"boolean\"}]}}},{\"name\":\"openFridges\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FridgeStatus\",\"doc\":\"Information about the fridges opened\",\"fields\":[{\"name\":\"fridgeId\",\"type\":\"int\"},{\"name\":\"userId\",\"type\":\"int\"},{\"name\":\"open\",\"type\":\"boolean\"}]}}},{\"name\":\"amountOfMeasurements\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Controller> ENCODER =
      new BinaryMessageEncoder<Controller>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Controller> DECODER =
      new BinaryMessageDecoder<Controller>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Controller> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Controller> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Controller>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Controller to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Controller from a ByteBuffer. */
  public static Controller fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public protocols.replication.Entity controllerEntity;
  @Deprecated public java.util.List<protocols.replication.Entity> entities;
  @Deprecated public java.util.List<protocols.replication.TemperatureHistory> temperatureHistories;
  @Deprecated public java.util.List<protocols.replication.LightStatus> lightStatusses;
  @Deprecated public java.util.List<protocols.replication.FridgeStatus> openFridges;
  @Deprecated public int amountOfMeasurements;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Controller() {}

  /**
   * All-args constructor.
   * @param controllerEntity The new value for controllerEntity
   * @param entities The new value for entities
   * @param temperatureHistories The new value for temperatureHistories
   * @param lightStatusses The new value for lightStatusses
   * @param openFridges The new value for openFridges
   * @param amountOfMeasurements The new value for amountOfMeasurements
   */
  public Controller(protocols.replication.Entity controllerEntity, java.util.List<protocols.replication.Entity> entities, java.util.List<protocols.replication.TemperatureHistory> temperatureHistories, java.util.List<protocols.replication.LightStatus> lightStatusses, java.util.List<protocols.replication.FridgeStatus> openFridges, java.lang.Integer amountOfMeasurements) {
    this.controllerEntity = controllerEntity;
    this.entities = entities;
    this.temperatureHistories = temperatureHistories;
    this.lightStatusses = lightStatusses;
    this.openFridges = openFridges;
    this.amountOfMeasurements = amountOfMeasurements;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return controllerEntity;
    case 1: return entities;
    case 2: return temperatureHistories;
    case 3: return lightStatusses;
    case 4: return openFridges;
    case 5: return amountOfMeasurements;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: controllerEntity = (protocols.replication.Entity)value$; break;
    case 1: entities = (java.util.List<protocols.replication.Entity>)value$; break;
    case 2: temperatureHistories = (java.util.List<protocols.replication.TemperatureHistory>)value$; break;
    case 3: lightStatusses = (java.util.List<protocols.replication.LightStatus>)value$; break;
    case 4: openFridges = (java.util.List<protocols.replication.FridgeStatus>)value$; break;
    case 5: amountOfMeasurements = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'controllerEntity' field.
   * @return The value of the 'controllerEntity' field.
   */
  public protocols.replication.Entity getControllerEntity() {
    return controllerEntity;
  }

  /**
   * Sets the value of the 'controllerEntity' field.
   * @param value the value to set.
   */
  public void setControllerEntity(protocols.replication.Entity value) {
    this.controllerEntity = value;
  }

  /**
   * Gets the value of the 'entities' field.
   * @return The value of the 'entities' field.
   */
  public java.util.List<protocols.replication.Entity> getEntities() {
    return entities;
  }

  /**
   * Sets the value of the 'entities' field.
   * @param value the value to set.
   */
  public void setEntities(java.util.List<protocols.replication.Entity> value) {
    this.entities = value;
  }

  /**
   * Gets the value of the 'temperatureHistories' field.
   * @return The value of the 'temperatureHistories' field.
   */
  public java.util.List<protocols.replication.TemperatureHistory> getTemperatureHistories() {
    return temperatureHistories;
  }

  /**
   * Sets the value of the 'temperatureHistories' field.
   * @param value the value to set.
   */
  public void setTemperatureHistories(java.util.List<protocols.replication.TemperatureHistory> value) {
    this.temperatureHistories = value;
  }

  /**
   * Gets the value of the 'lightStatusses' field.
   * @return The value of the 'lightStatusses' field.
   */
  public java.util.List<protocols.replication.LightStatus> getLightStatusses() {
    return lightStatusses;
  }

  /**
   * Sets the value of the 'lightStatusses' field.
   * @param value the value to set.
   */
  public void setLightStatusses(java.util.List<protocols.replication.LightStatus> value) {
    this.lightStatusses = value;
  }

  /**
   * Gets the value of the 'openFridges' field.
   * @return The value of the 'openFridges' field.
   */
  public java.util.List<protocols.replication.FridgeStatus> getOpenFridges() {
    return openFridges;
  }

  /**
   * Sets the value of the 'openFridges' field.
   * @param value the value to set.
   */
  public void setOpenFridges(java.util.List<protocols.replication.FridgeStatus> value) {
    this.openFridges = value;
  }

  /**
   * Gets the value of the 'amountOfMeasurements' field.
   * @return The value of the 'amountOfMeasurements' field.
   */
  public java.lang.Integer getAmountOfMeasurements() {
    return amountOfMeasurements;
  }

  /**
   * Sets the value of the 'amountOfMeasurements' field.
   * @param value the value to set.
   */
  public void setAmountOfMeasurements(java.lang.Integer value) {
    this.amountOfMeasurements = value;
  }

  /**
   * Creates a new Controller RecordBuilder.
   * @return A new Controller RecordBuilder
   */
  public static protocols.replication.Controller.Builder newBuilder() {
    return new protocols.replication.Controller.Builder();
  }

  /**
   * Creates a new Controller RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Controller RecordBuilder
   */
  public static protocols.replication.Controller.Builder newBuilder(protocols.replication.Controller.Builder other) {
    return new protocols.replication.Controller.Builder(other);
  }

  /**
   * Creates a new Controller RecordBuilder by copying an existing Controller instance.
   * @param other The existing instance to copy.
   * @return A new Controller RecordBuilder
   */
  public static protocols.replication.Controller.Builder newBuilder(protocols.replication.Controller other) {
    return new protocols.replication.Controller.Builder(other);
  }

  /**
   * RecordBuilder for Controller instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Controller>
    implements org.apache.avro.data.RecordBuilder<Controller> {

    private protocols.replication.Entity controllerEntity;
    private protocols.replication.Entity.Builder controllerEntityBuilder;
    private java.util.List<protocols.replication.Entity> entities;
    private java.util.List<protocols.replication.TemperatureHistory> temperatureHistories;
    private java.util.List<protocols.replication.LightStatus> lightStatusses;
    private java.util.List<protocols.replication.FridgeStatus> openFridges;
    private int amountOfMeasurements;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(protocols.replication.Controller.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.controllerEntity)) {
        this.controllerEntity = data().deepCopy(fields()[0].schema(), other.controllerEntity);
        fieldSetFlags()[0] = true;
      }
      if (other.hasControllerEntityBuilder()) {
        this.controllerEntityBuilder = protocols.replication.Entity.newBuilder(other.getControllerEntityBuilder());
      }
      if (isValidValue(fields()[1], other.entities)) {
        this.entities = data().deepCopy(fields()[1].schema(), other.entities);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.temperatureHistories)) {
        this.temperatureHistories = data().deepCopy(fields()[2].schema(), other.temperatureHistories);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lightStatusses)) {
        this.lightStatusses = data().deepCopy(fields()[3].schema(), other.lightStatusses);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.openFridges)) {
        this.openFridges = data().deepCopy(fields()[4].schema(), other.openFridges);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.amountOfMeasurements)) {
        this.amountOfMeasurements = data().deepCopy(fields()[5].schema(), other.amountOfMeasurements);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Controller instance
     * @param other The existing instance to copy.
     */
    private Builder(protocols.replication.Controller other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.controllerEntity)) {
        this.controllerEntity = data().deepCopy(fields()[0].schema(), other.controllerEntity);
        fieldSetFlags()[0] = true;
      }
      this.controllerEntityBuilder = null;
      if (isValidValue(fields()[1], other.entities)) {
        this.entities = data().deepCopy(fields()[1].schema(), other.entities);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.temperatureHistories)) {
        this.temperatureHistories = data().deepCopy(fields()[2].schema(), other.temperatureHistories);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lightStatusses)) {
        this.lightStatusses = data().deepCopy(fields()[3].schema(), other.lightStatusses);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.openFridges)) {
        this.openFridges = data().deepCopy(fields()[4].schema(), other.openFridges);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.amountOfMeasurements)) {
        this.amountOfMeasurements = data().deepCopy(fields()[5].schema(), other.amountOfMeasurements);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'controllerEntity' field.
      * @return The value.
      */
    public protocols.replication.Entity getControllerEntity() {
      return controllerEntity;
    }

    /**
      * Sets the value of the 'controllerEntity' field.
      * @param value The value of 'controllerEntity'.
      * @return This builder.
      */
    public protocols.replication.Controller.Builder setControllerEntity(protocols.replication.Entity value) {
      validate(fields()[0], value);
      this.controllerEntityBuilder = null;
      this.controllerEntity = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'controllerEntity' field has been set.
      * @return True if the 'controllerEntity' field has been set, false otherwise.
      */
    public boolean hasControllerEntity() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'controllerEntity' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public protocols.replication.Entity.Builder getControllerEntityBuilder() {
      if (controllerEntityBuilder == null) {
        if (hasControllerEntity()) {
          setControllerEntityBuilder(protocols.replication.Entity.newBuilder(controllerEntity));
        } else {
          setControllerEntityBuilder(protocols.replication.Entity.newBuilder());
        }
      }
      return controllerEntityBuilder;
    }

    /**
     * Sets the Builder instance for the 'controllerEntity' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public protocols.replication.Controller.Builder setControllerEntityBuilder(protocols.replication.Entity.Builder value) {
      clearControllerEntity();
      controllerEntityBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'controllerEntity' field has an active Builder instance
     * @return True if the 'controllerEntity' field has an active Builder instance
     */
    public boolean hasControllerEntityBuilder() {
      return controllerEntityBuilder != null;
    }

    /**
      * Clears the value of the 'controllerEntity' field.
      * @return This builder.
      */
    public protocols.replication.Controller.Builder clearControllerEntity() {
      controllerEntity = null;
      controllerEntityBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'entities' field.
      * @return The value.
      */
    public java.util.List<protocols.replication.Entity> getEntities() {
      return entities;
    }

    /**
      * Sets the value of the 'entities' field.
      * @param value The value of 'entities'.
      * @return This builder.
      */
    public protocols.replication.Controller.Builder setEntities(java.util.List<protocols.replication.Entity> value) {
      validate(fields()[1], value);
      this.entities = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'entities' field has been set.
      * @return True if the 'entities' field has been set, false otherwise.
      */
    public boolean hasEntities() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'entities' field.
      * @return This builder.
      */
    public protocols.replication.Controller.Builder clearEntities() {
      entities = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'temperatureHistories' field.
      * @return The value.
      */
    public java.util.List<protocols.replication.TemperatureHistory> getTemperatureHistories() {
      return temperatureHistories;
    }

    /**
      * Sets the value of the 'temperatureHistories' field.
      * @param value The value of 'temperatureHistories'.
      * @return This builder.
      */
    public protocols.replication.Controller.Builder setTemperatureHistories(java.util.List<protocols.replication.TemperatureHistory> value) {
      validate(fields()[2], value);
      this.temperatureHistories = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'temperatureHistories' field has been set.
      * @return True if the 'temperatureHistories' field has been set, false otherwise.
      */
    public boolean hasTemperatureHistories() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'temperatureHistories' field.
      * @return This builder.
      */
    public protocols.replication.Controller.Builder clearTemperatureHistories() {
      temperatureHistories = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'lightStatusses' field.
      * @return The value.
      */
    public java.util.List<protocols.replication.LightStatus> getLightStatusses() {
      return lightStatusses;
    }

    /**
      * Sets the value of the 'lightStatusses' field.
      * @param value The value of 'lightStatusses'.
      * @return This builder.
      */
    public protocols.replication.Controller.Builder setLightStatusses(java.util.List<protocols.replication.LightStatus> value) {
      validate(fields()[3], value);
      this.lightStatusses = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'lightStatusses' field has been set.
      * @return True if the 'lightStatusses' field has been set, false otherwise.
      */
    public boolean hasLightStatusses() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'lightStatusses' field.
      * @return This builder.
      */
    public protocols.replication.Controller.Builder clearLightStatusses() {
      lightStatusses = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'openFridges' field.
      * @return The value.
      */
    public java.util.List<protocols.replication.FridgeStatus> getOpenFridges() {
      return openFridges;
    }

    /**
      * Sets the value of the 'openFridges' field.
      * @param value The value of 'openFridges'.
      * @return This builder.
      */
    public protocols.replication.Controller.Builder setOpenFridges(java.util.List<protocols.replication.FridgeStatus> value) {
      validate(fields()[4], value);
      this.openFridges = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'openFridges' field has been set.
      * @return True if the 'openFridges' field has been set, false otherwise.
      */
    public boolean hasOpenFridges() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'openFridges' field.
      * @return This builder.
      */
    public protocols.replication.Controller.Builder clearOpenFridges() {
      openFridges = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'amountOfMeasurements' field.
      * @return The value.
      */
    public java.lang.Integer getAmountOfMeasurements() {
      return amountOfMeasurements;
    }

    /**
      * Sets the value of the 'amountOfMeasurements' field.
      * @param value The value of 'amountOfMeasurements'.
      * @return This builder.
      */
    public protocols.replication.Controller.Builder setAmountOfMeasurements(int value) {
      validate(fields()[5], value);
      this.amountOfMeasurements = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'amountOfMeasurements' field has been set.
      * @return True if the 'amountOfMeasurements' field has been set, false otherwise.
      */
    public boolean hasAmountOfMeasurements() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'amountOfMeasurements' field.
      * @return This builder.
      */
    public protocols.replication.Controller.Builder clearAmountOfMeasurements() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Controller build() {
      try {
        Controller record = new Controller();
        if (controllerEntityBuilder != null) {
          record.controllerEntity = this.controllerEntityBuilder.build();
        } else {
          record.controllerEntity = fieldSetFlags()[0] ? this.controllerEntity : (protocols.replication.Entity) defaultValue(fields()[0]);
        }
        record.entities = fieldSetFlags()[1] ? this.entities : (java.util.List<protocols.replication.Entity>) defaultValue(fields()[1]);
        record.temperatureHistories = fieldSetFlags()[2] ? this.temperatureHistories : (java.util.List<protocols.replication.TemperatureHistory>) defaultValue(fields()[2]);
        record.lightStatusses = fieldSetFlags()[3] ? this.lightStatusses : (java.util.List<protocols.replication.LightStatus>) defaultValue(fields()[3]);
        record.openFridges = fieldSetFlags()[4] ? this.openFridges : (java.util.List<protocols.replication.FridgeStatus>) defaultValue(fields()[4]);
        record.amountOfMeasurements = fieldSetFlags()[5] ? this.amountOfMeasurements : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Controller>
    WRITER$ = (org.apache.avro.io.DatumWriter<Controller>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Controller>
    READER$ = (org.apache.avro.io.DatumReader<Controller>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
