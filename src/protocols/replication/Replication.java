/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package protocols.replication;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public interface Replication {
  public static final org.apache.avro.Protocol PROTOCOL = org.apache.avro.Protocol.parse("{\"protocol\":\"Replication\",\"namespace\":\"protocols.replication\",\"types\":[{\"type\":\"record\",\"name\":\"Entity\",\"doc\":\"Device info for the network\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"ipadress\",\"type\":\"string\"},{\"name\":\"port\",\"type\":\"int\"},{\"name\":\"type\",\"type\":\"string\"}]},{\"type\":\"record\",\"name\":\"TemperatureHistory\",\"doc\":\"Temperature measured by a sensor\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"temperatures\",\"type\":{\"type\":\"array\",\"items\":\"double\"}}]},{\"type\":\"record\",\"name\":\"LightStatus\",\"doc\":\"Status of all the lights\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"state\",\"type\":\"boolean\"}]},{\"type\":\"record\",\"name\":\"FridgeStatus\",\"doc\":\"Information about the fridges opened\",\"fields\":[{\"name\":\"fridgeId\",\"type\":\"int\"},{\"name\":\"userId\",\"type\":\"int\"},{\"name\":\"open\",\"type\":\"boolean\"}]},{\"type\":\"record\",\"name\":\"Controller\",\"doc\":\"Initial structure to be send for replication\",\"fields\":[{\"name\":\"controllerEntity\",\"type\":\"Entity\"},{\"name\":\"entities\",\"type\":{\"type\":\"array\",\"items\":\"Entity\"}},{\"name\":\"temperatureHistories\",\"type\":{\"type\":\"array\",\"items\":\"TemperatureHistory\"}},{\"name\":\"lightStatusses\",\"type\":{\"type\":\"array\",\"items\":\"LightStatus\"}},{\"name\":\"openFridges\",\"type\":{\"type\":\"array\",\"items\":\"FridgeStatus\"}},{\"name\":\"amountOfMeasurements\",\"type\":\"int\"}]},{\"type\":\"error\",\"name\":\"Failure\",\"doc\":\"Failure\",\"fields\":[{\"name\":\"info\",\"type\":\"string\"}]}],\"messages\":{\"handshake\":{\"doc\":\"Initial replication, sending all entities available at the moment\",\"request\":[{\"name\":\"controller\",\"type\":\"Controller\"}],\"response\":\"null\",\"errors\":[\"Failure\"]},\"registerEntity\":{\"doc\":\"Each time a new entity gets registered in the controller, this method will be called\",\"request\":[{\"name\":\"entity\",\"type\":\"Entity\"}],\"response\":\"null\",\"errors\":[\"Failure\"]},\"addTemperatureHistory\":{\"doc\":\"Each time a new temperature history registered in the controller, this method will be called\",\"request\":[{\"name\":\"temperatureHistory\",\"type\":\"TemperatureHistory\"}],\"response\":\"null\",\"errors\":[\"Failure\"]},\"updateLightStatus\":{\"doc\":\"Each time the light status gets updated in the controller, this method will be called\",\"request\":[{\"name\":\"lightStatusses\",\"type\":{\"type\":\"array\",\"items\":\"LightStatus\"}}],\"response\":\"null\",\"errors\":[\"Failure\"]},\"updateFridge\":{\"doc\":\"Each time a fridge gets updated, this method will be called\",\"request\":[{\"name\":\"data\",\"type\":\"FridgeStatus\"}],\"response\":\"null\",\"errors\":[\"Failure\"]}}}");
  /**
   * Initial replication, sending all entities available at the moment
   */
  java.lang.Void handshake(protocols.replication.Controller controller) throws org.apache.avro.AvroRemoteException, protocols.replication.Failure;
  /**
   * Each time a new entity gets registered in the controller, this method will be called
   */
  java.lang.Void registerEntity(protocols.replication.Entity entity) throws org.apache.avro.AvroRemoteException, protocols.replication.Failure;
  /**
   * Each time a new temperature history registered in the controller, this method will be called
   */
  java.lang.Void addTemperatureHistory(protocols.replication.TemperatureHistory temperatureHistory) throws org.apache.avro.AvroRemoteException, protocols.replication.Failure;
  /**
   * Each time the light status gets updated in the controller, this method will be called
   */
  java.lang.Void updateLightStatus(java.util.List<protocols.replication.LightStatus> lightStatusses) throws org.apache.avro.AvroRemoteException, protocols.replication.Failure;
  /**
   * Each time a fridge gets updated, this method will be called
   */
  java.lang.Void updateFridge(protocols.replication.FridgeStatus data) throws org.apache.avro.AvroRemoteException, protocols.replication.Failure;

  @SuppressWarnings("all")
  public interface Callback extends Replication {
    public static final org.apache.avro.Protocol PROTOCOL = protocols.replication.Replication.PROTOCOL;
    /**
     * Initial replication, sending all entities available at the moment
     * @throws java.io.IOException The async call could not be completed.
     */
    void handshake(protocols.replication.Controller controller, org.apache.avro.ipc.Callback<java.lang.Void> callback) throws java.io.IOException;
    /**
     * Each time a new entity gets registered in the controller, this method will be called
     * @throws java.io.IOException The async call could not be completed.
     */
    void registerEntity(protocols.replication.Entity entity, org.apache.avro.ipc.Callback<java.lang.Void> callback) throws java.io.IOException;
    /**
     * Each time a new temperature history registered in the controller, this method will be called
     * @throws java.io.IOException The async call could not be completed.
     */
    void addTemperatureHistory(protocols.replication.TemperatureHistory temperatureHistory, org.apache.avro.ipc.Callback<java.lang.Void> callback) throws java.io.IOException;
    /**
     * Each time the light status gets updated in the controller, this method will be called
     * @throws java.io.IOException The async call could not be completed.
     */
    void updateLightStatus(java.util.List<protocols.replication.LightStatus> lightStatusses, org.apache.avro.ipc.Callback<java.lang.Void> callback) throws java.io.IOException;
    /**
     * Each time a fridge gets updated, this method will be called
     * @throws java.io.IOException The async call could not be completed.
     */
    void updateFridge(protocols.replication.FridgeStatus data, org.apache.avro.ipc.Callback<java.lang.Void> callback) throws java.io.IOException;
  }
}