/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package protocols.fridge;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Failure */
@org.apache.avro.specific.AvroGenerated
public class Failure extends org.apache.avro.specific.SpecificExceptionBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3478125305424058116L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"error\",\"name\":\"Failure\",\"namespace\":\"protocols.fridge\",\"doc\":\"Failure\",\"fields\":[{\"name\":\"info\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();


  @Deprecated public java.lang.CharSequence info;

  public Failure() {
    super();
  }

  public Failure(Object value) {
    super(value);
  }

  public Failure(Throwable cause) {
    super(cause);
  }

  public Failure(Object value, Throwable cause) {
    super(value, cause);
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return info;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: info = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'info' field.
   * @return The value of the 'info' field.
   */
  public java.lang.CharSequence getInfo() {
    return info;
  }

  /**
   * Sets the value of the 'info' field.
   * @param value the value to set.
   */
  public void setInfo(java.lang.CharSequence value) {
    this.info = value;
  }

  /**
   * Creates a new Failure RecordBuilder.
   * @return A new Failure RecordBuilder
   */
  public static protocols.fridge.Failure.Builder newBuilder() {
    return new protocols.fridge.Failure.Builder();
  }

  /**
   * Creates a new Failure RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Failure RecordBuilder
   */
  public static protocols.fridge.Failure.Builder newBuilder(protocols.fridge.Failure.Builder other) {
    return new protocols.fridge.Failure.Builder(other);
  }

  /**
   * Creates a new Failure RecordBuilder by copying an existing Failure instance.
   * @param other The existing instance to copy.
   * @return A new Failure RecordBuilder
   */
  public static protocols.fridge.Failure.Builder newBuilder(protocols.fridge.Failure other) {
    return new protocols.fridge.Failure.Builder(other);
  }

  /**
   * RecordBuilder for Failure instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificErrorBuilderBase<Failure>
    implements org.apache.avro.data.ErrorBuilder<Failure> {

    private java.lang.CharSequence info;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(protocols.fridge.Failure.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.info)) {
        this.info = data().deepCopy(fields()[0].schema(), other.info);
        fieldSetFlags()[0] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Failure instance
     * @param other The existing instance to copy.
     */
    private Builder(protocols.fridge.Failure other) {
      super(other);
      if (isValidValue(fields()[0], other.info)) {
        this.info = data().deepCopy(fields()[0].schema(), other.info);
        fieldSetFlags()[0] = true;
      }
    }

    @Override
    public protocols.fridge.Failure.Builder setValue(Object value) {
      super.setValue(value);
      return this;
    }

    @Override
    public protocols.fridge.Failure.Builder clearValue() {
      super.clearValue();
      return this;
    }

    @Override
    public protocols.fridge.Failure.Builder setCause(Throwable cause) {
      super.setCause(cause);
      return this;
    }

    @Override
    public protocols.fridge.Failure.Builder clearCause() {
      super.clearCause();
      return this;
    }

    /**
      * Gets the value of the 'info' field.
      * @return The value.
      */
    public java.lang.CharSequence getInfo() {
      return info;
    }

    /**
      * Sets the value of the 'info' field.
      * @param value The value of 'info'.
      * @return This builder.
      */
    public protocols.fridge.Failure.Builder setInfo(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.info = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'info' field has been set.
      * @return True if the 'info' field has been set, false otherwise.
      */
    public boolean hasInfo() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'info' field.
      * @return This builder.
      */
    public protocols.fridge.Failure.Builder clearInfo() {
      info = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Failure build() {
      try {
        Failure record = new Failure(getValue(), getCause());
        record.info = fieldSetFlags()[0] ? this.info : (java.lang.CharSequence) defaultValue(fields()[0]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Failure>
    WRITER$ = (org.apache.avro.io.DatumWriter<Failure>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Failure>
    READER$ = (org.apache.avro.io.DatumReader<Failure>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
